//includes
#include <stdio.h>
#include <pthread.h>
#include <signal.h>
#include <limits.h>
#include <semaphore.h>

pthread_t
t1,
t2,
t3,
t4,
t5,
t6,
t7,
t8,
t9,
t10;

sem_t m;
sem_t barrier1;
sem_t barrier2;

int global_num = 0;
int num_pthreads = 0;
int global_total = 0;

void* helper(void* args){
  for(int i = 1; i < 11; i++){
    for(int j = 0; j < INT_MAX*0.01; j++){

    }

    sem_wait(&m);
    global_num++;
    global_total++;

    if(global_num == num_pthreads){

      sem_wait(&barrier2);
      sem_post(&barrier1);
    }

    sem_post(&m);

    sem_wait(&barrier1);
    sem_post(&barrier1);

    printf("Thread: %d \nIteration number: %d\n\n",(int)pthread_self()%5,i);

    sem_wait(&m);

    global_num--;

    if(global_num == 0){
      sem_wait(&barrier1);
      sem_post(&barrier2);
    }

    sem_post(&m);
    sem_wait(&barrier2);
    sem_post(&barrier2);
  }
  return NULL;
}

int main(){
  sem_init(&m, 0, 1);
  sem_init(&barrier1, 0, 0);
  sem_init(&barrier2, 0, 1);

  num_pthreads = 10;
  global_num = 0;

  pthread_create(&t1, NULL, helper, NULL);
  pthread_create(&t2, NULL, helper, NULL);
  pthread_create(&t3, NULL, helper, NULL);
  pthread_create(&t4, NULL, helper, NULL);
  pthread_create(&t5, NULL, helper, NULL);
  pthread_create(&t6, NULL, helper, NULL);
  pthread_create(&t7, NULL, helper, NULL);
  pthread_create(&t8, NULL, helper, NULL);
  pthread_create(&t9, NULL, helper, NULL);
  pthread_create(&t10, NULL, helper, NULL);

  pthread_join(t1, NULL);
  pthread_join(t2, NULL);
  pthread_join(t3, NULL);
  pthread_join(t4, NULL);
  pthread_join(t5, NULL);
  pthread_join(t6, NULL);
  pthread_join(t7, NULL);
  pthread_join(t8, NULL);
  pthread_join(t9, NULL);
  pthread_join(t10, NULL);

  printf("Global total: %d\n", global_total);

  return 0;
}

